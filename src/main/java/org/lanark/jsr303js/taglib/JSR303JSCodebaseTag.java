/*
 * Copyright 2002-2005 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.lanark.jsr303js.taglib;

import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.util.Assert;
import org.springframework.web.servlet.tags.RequestContextAwareTag;

import javax.servlet.ServletException;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.Writer;

/**
 * Prints out the JavaScript from the jsr303js-codebase.js file.
 * For validation to work you need to put this tag in your page or
 * extract the jsr303js-codebase.js file from the jar and include
 * that file in your page using a &lt;script&gt; tag. This tag or
 * the &lt;script&gt; tag for the JavaScript file must come before
 * the {@link JSR303JSValidateTag}, otherwise the JavaScript
 * generated by the {@link JSR303JSValidateTag} will throw an error.
 *
 * @author sdouglass
 * @version $Id$
 */
public class JSR303JSCodebaseTag extends RequestContextAwareTag {

  /**
   * Returns a <code>Reader</code> for accessing the JavaScript codebase used by the
   * translated validation rules.
   *
   * @return a Reader for accessing the JavaScript codebase used by the translated validation rules
   * @throws java.io.IOException
   */
  public static Reader getCodebaseReader() throws IOException {
    Resource codebaseResource = new ClassPathResource("jsr303js-codebase.js");
    return new InputStreamReader(codebaseResource.getInputStream());
  }

//  private final static String DEFAULT_GLOBAL_ERRORS_ID = "global_errors";

//  private final static String DEFAULT_FIELD_ERROR_ID_SUFFIX = "_error";

  private boolean includeScriptTags = true;

  private String globalErrorsId = null;//DEFAULT_GLOBAL_ERRORS_ID;

  private String fieldErrorsIdSuffix = null;//DEFAULT_FIELD_ERROR_ID_SUFFIX;

  /**
   * Sets whether or not the generated code should be wrapped in HTML
   * &lt;script&gt; tags. This is useful if you wont to include the
   * codebase directly in a HTML page.
   *
   * @param includeScriptTags whether or not to include the script tags
   */
  public void setIncludeScriptTags(String includeScriptTags) {
    this.includeScriptTags = "true".equalsIgnoreCase(includeScriptTags);
  }

  /**
   * Sets the id of the element that will hold the global error. If not set, this tag will look for
   * an element with id "global_errors".
   *
   * @param globalErrorsId The id of the element that should hold the global errors.
   */
  public void setGlobalErrorsId(String globalErrorsId) {
    this.globalErrorsId = globalErrorsId;
  }

  /**
   * Sets the id suffix of the element that should hold the error of a specific field. For example, if the
   * validated field is "firstName" and the suffix is set to "_err" then this tag will put the validation
   * errors for the firstName field in an element with id "firstName_err". If this suffix is not set, it is set
   * by default to "_error".
   *
   * @param fieldErrorsIdSuffix The id suffix of the element that should hold the error of a specific field.
   */
  public void setFieldErrorsIdSuffix(String fieldErrorsIdSuffix) {
    this.fieldErrorsIdSuffix = fieldErrorsIdSuffix;
  }

  protected int doStartTagInternal() throws ServletException, JspException {
    return SKIP_BODY;
  }

  public int doEndTag() throws JspException {
    try {
      JspWriter out = pageContext.getOut();
      if (includeScriptTags) {
        out.write("<script type=\"text/javascript\">\n");
      }
      if (globalErrorsId != null) {
        out.write("var tlGlobalErrorsId = '" + globalErrorsId + "';\n");
      }
      if (fieldErrorsIdSuffix != null) {
        out.write("var tlFieldErrorIdSuffix = '" + fieldErrorsIdSuffix + "';\n");
      }
      copy(getCodebaseReader(), out);
      if (includeScriptTags) {
        out.write("\n</script>");
      }
      return EVAL_PAGE;
    }
    catch (IOException e) {
      throw new JspException("Could not write validation codebase", e);
    }
  }

  /**
   * Copies the chars from in to out and then closes in but
   * leaves out open.
   *
   * @param in the input reader
   * @param out the output writer
   * @throws IOException if there is an io exception
   */
  private void copy(Reader in, Writer out) throws IOException {
    Assert.notNull(in, "No Reader specified");
    Assert.notNull(out, "No Writer specified");
    try {
      char[] buffer = new char[1024];
      int bytesRead;
      while ((bytesRead = in.read(buffer)) != -1) {
        out.write(buffer, 0, bytesRead);
      }
      out.flush();
    }
    finally {
      try {
        in.close();
      }
      catch (IOException ex) {
        logger.warn("Could not close Reader", ex);
      }
    }
  }

  public void doFinally() {
    super.doFinally();
//    includeScriptTags = false;
  }
}